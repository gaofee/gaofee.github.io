import{ab as l,G as n,H as o,E as i,S as t,N as g,ac as a,W as p}from"./framework-251de721.js";const r={},c=a('<h2 id="_1-git介绍" tabindex="-1"><a class="header-anchor" href="#_1-git介绍" aria-hidden="true">#</a> 1.Git介绍</h2><h3 id="_1-1版本控制-理解" tabindex="-1"><a class="header-anchor" href="#_1-1版本控制-理解" aria-hidden="true">#</a> 1.1版本控制(理解)</h3><p>无论是代码编写，还是文档编写，我们都会遇到对文档内容反复修改的情况</p><figure><img src="https://gaofee.cc/images/202303161019264.png" alt="01_版本控制介绍" tabindex="0" loading="lazy"><figcaption>01_版本控制介绍</figcaption></figure><h3 id="_1-2开发中存在的问题-理解" tabindex="-1"><a class="header-anchor" href="#_1-2开发中存在的问题-理解" aria-hidden="true">#</a> 1.2开发中存在的问题(理解)</h3><ul><li>程序员小明负责的模块就要完成了，就在即将提交发布之前的一瞬间，电脑突然蓝屏，硬盘光荣下岗！</li></ul><p>几个月来的努力付之东流</p><p>​ <img src="https://gaofee.cc/images/202303161019266.png" alt="02_开发中的麻烦" loading="lazy"></p><ul><li><p>老王需要在项目中加入一个很复杂的功能，一边尝试，一边修改代码，就这样摸索了一个星期。 可是这被改得面目全非的代码已经回不到从前了。</p><figure><img src="https://gaofee.cc/images/202303161019267.png" alt="03_开发中的麻烦" tabindex="0" loading="lazy"><figcaption>03_开发中的麻烦</figcaption></figure></li><li><p>小明和老王先后从文件服务器上下载了同一个文件</p><figure><img src="https://gaofee.cc/images/202303161019268.png" alt="04_开发中的麻烦" tabindex="0" loading="lazy"><figcaption>04_开发中的麻烦</figcaption></figure></li><li><p>因项目中Bug过多，导致项目进度拖延，项目经理老徐因此被骂，但不清楚Bug是手下哪一个程序员写的</p><figure><img src="https://gaofee.cc/images/202303161019269.png" alt="05_开发中的麻烦" tabindex="0" loading="lazy"><figcaption>05_开发中的麻烦</figcaption></figure></li><li><p>开发中要解决的问题</p><ul><li>代码备份</li><li>版本控制</li><li>协同工作</li><li>责任追溯</li></ul></li></ul><h3 id="_1-3svn版本控制-理解" tabindex="-1"><a class="header-anchor" href="#_1-3svn版本控制-理解" aria-hidden="true">#</a> 1.3SVN版本控制(理解)</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑， 所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器。</p><ul><li><p>服务器单点故障</p><p>将会导致所有人员无法工作</p></li><li><p>而服务器硬盘损坏</p><p>这意味着，你可能失去了该项目的所有历史记录，这是毁灭性的。</p><figure><img src="https://gaofee.cc/images/202303161019270.png" alt="06_svn和git的对比" tabindex="0" loading="lazy"><figcaption>06_svn和git的对比</figcaption></figure></li></ul><h3 id="_1-4git版本控制-理解" tabindex="-1"><a class="header-anchor" href="#_1-4git版本控制-理解" aria-hidden="true">#</a> 1.4Git版本控制(理解)</h3><p>Git是在2005年，Linux系统的创建者Linus Torvalds,为了帮助全球的开发者，维护Linux系统内核的开发 而开发了自己的开源分布式版本控制工具,分为两种类型的仓库：本地仓库和远程仓库。</p><ul><li><p>每一个客户端都保存了完整的历史记录</p><p>服务器的故障，都可以通过客户端的记录得以恢复。</p><figure><img src="https://gaofee.cc/images/202303161019271.png" alt="07_svn和git的对比" tabindex="0" loading="lazy"><figcaption>07_svn和git的对比</figcaption></figure></li></ul><h2 id="_2-git下载和安装" tabindex="-1"><a class="header-anchor" href="#_2-git下载和安装" aria-hidden="true">#</a> 2.Git下载和安装</h2><h3 id="_2-1git的下载-应用" tabindex="-1"><a class="header-anchor" href="#_2-1git的下载-应用" aria-hidden="true">#</a> 2.1Git的下载(应用)</h3>',17),s={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},f=a('<figure><img src="https://gaofee.cc/images/202303161019272.png" alt="08_Git的下载" tabindex="0" loading="lazy"><figcaption>08_Git的下载</figcaption></figure><h3 id="_2-2git的安装-应用" tabindex="-1"><a class="header-anchor" href="#_2-2git的安装-应用" aria-hidden="true">#</a> 2.2Git的安装(应用)</h3><ol><li><p>双击安装包，进入安装向导界面</p><figure><img src="https://gaofee.cc/images/202303161019273.png" alt="09_Git的安装01" tabindex="0" loading="lazy"><figcaption>09_Git的安装01</figcaption></figure></li><li><p>指定安装目录</p><figure><img src="https://gaofee.cc/images/202303161019274.png" alt="10_Git的安装02" tabindex="0" loading="lazy"><figcaption>10_Git的安装02</figcaption></figure></li><li><p>一路next下一步</p><figure><img src="https://gaofee.cc/images/202303161019275.png" alt="11_Git的安装03" tabindex="0" loading="lazy"><figcaption>11_Git的安装03</figcaption></figure></li><li><p>等待安装</p><figure><img src="https://gaofee.cc/images/202303161019276.png" alt="12_Git的安装04" tabindex="0" loading="lazy"><figcaption>12_Git的安装04</figcaption></figure></li><li><p>安装完成</p><figure><img src="https://gaofee.cc/images/202303161019277.png" alt="13_Git的安装05" tabindex="0" loading="lazy"><figcaption>13_Git的安装05</figcaption></figure></li><li><p>安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明Git安装成功。</p><figure><img src="https://gaofee.cc/images/202303161019278.png" alt="14_Git的安装06" tabindex="0" loading="lazy"><figcaption>14_Git的安装06</figcaption></figure></li><li><p>运行Git命令客户端，使用git --version 命令，可以查看git版本</p><figure><img src="https://gaofee.cc/images/202303161019279.png" alt="15_Git的安装07" tabindex="0" loading="lazy"><figcaption>15_Git的安装07</figcaption></figure></li></ol><h3 id="_2-3tortoisegit的安装-应用" tabindex="-1"><a class="header-anchor" href="#_2-3tortoisegit的安装-应用" aria-hidden="true">#</a> 2.3TortoiseGit的安装(应用)</h3><ol><li><p>双击安装包，进入安装向导界面</p><figure><img src="https://gaofee.cc/images/202303161019280.png" alt="16_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>16_TortiseGit的安装</figcaption></figure></li><li><p>一路next下一步</p><figure><img src="https://gaofee.cc/images/202303161019281.png" alt="17_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>17_TortiseGit的安装</figcaption></figure></li><li><p>指定安装目录 <img src="https://gaofee.cc/images/202303161019282.png" alt="18_TortiseGit的安装" loading="lazy"></p></li><li><p>安装</p><figure><img src="https://gaofee.cc/images/202303161019283.png" alt="19_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>19_TortiseGit的安装</figcaption></figure></li><li><p>配置</p><figure><img src="https://gaofee.cc/images/202303161019284.png" alt="20_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>20_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019285.png" alt="21_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>21_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019286.png" alt="22_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>22_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019287.png" alt="23_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>23_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019288.png" alt="24_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>24_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019289.png" alt="25_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>25_TortiseGit的安装</figcaption></figure></li><li><p>安装TortoiseGit中文语言包,一路next即可</p></li></ol><figure><img src="https://gaofee.cc/images/202303161019290.png" alt="26_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>26_TortiseGit的安装</figcaption></figure><ol start="7"><li><p>配置TortoiseGit中文语言</p><figure><img src="https://gaofee.cc/images/202303161019291.png" alt="27_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>27_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019292.png" alt="28_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>28_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019293.png" alt="29_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>29_TortiseGit的安装</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019294.png" alt="30_TortiseGit的安装" tabindex="0" loading="lazy"><figcaption>30_TortiseGit的安装</figcaption></figure></li></ol><h2 id="_3-git操作入门" tabindex="-1"><a class="header-anchor" href="#_3-git操作入门" aria-hidden="true">#</a> 3.Git操作入门</h2><h3 id="_3-1git基本工作流程-理解" tabindex="-1"><a class="header-anchor" href="#_3-1git基本工作流程-理解" aria-hidden="true">#</a> 3.1Git基本工作流程(理解)</h3><p>本地仓库</p><figure><img src="https://gaofee.cc/images/202303161019295.png" alt="31_Git基本工作流程" tabindex="0" loading="lazy"><figcaption>31_Git基本工作流程</figcaption></figure><h3 id="_3-2git命令行操作-应用" tabindex="-1"><a class="header-anchor" href="#_3-2git命令行操作-应用" aria-hidden="true">#</a> 3.2Git命令行操作(应用)</h3><ul><li><p>git常用命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化，创建 git 仓库</td></tr><tr><td>git status</td><td>查看 git 状态 （文件是否进行了添加、提交操作）</td></tr><tr><td>git add 文件名</td><td>添加，将指定文件添加到暂存区</td></tr><tr><td>git commit -m &#39;提交信息&#39;</td><td>提交，将暂存区文件提交到历史仓库</td></tr><tr><td>git log</td><td>查看日志（ git 提交的历史日志）</td></tr></tbody></table></li><li><p>操作步骤</p><ol><li><p>创建工作目录、初始化本地 git 仓库</p><figure><img src="https://gaofee.cc/images/202303161019296.png" alt="32_Git工作流程" tabindex="0" loading="lazy"><figcaption>32_Git工作流程</figcaption></figure></li><li><p>新建一个 test.txt 文件（暂不执行添加操作）</p></li><li><p>使用 status 命令，查看状态</p><figure><img src="https://gaofee.cc/images/202303161019297.png" alt="33_Git工作流程" tabindex="0" loading="lazy"><figcaption>33_Git工作流程</figcaption></figure></li><li><p>使用 add 命令添加，并查看状态</p><figure><img src="https://gaofee.cc/images/202303161019298.png" alt="34_Git工作流程" tabindex="0" loading="lazy"><figcaption>34_Git工作流程</figcaption></figure></li><li><p>使用 commit 命令，提交到本地历史仓库</p><figure><img src="https://gaofee.cc/images/202303161019299.png" alt="35_Git工作流程" tabindex="0" loading="lazy"><figcaption>35_Git工作流程</figcaption></figure></li><li><p>使用 log 命令，查看日志</p><figure><img src="https://gaofee.cc/images/202303161019300.png" alt="36_Git工作流程" tabindex="0" loading="lazy"><figcaption>36_Git工作流程</figcaption></figure></li><li><p>修改 test.txt 文件</p><figure><img src="https://gaofee.cc/images/202303161019301.png" alt="37_Git工作流程" tabindex="0" loading="lazy"><figcaption>37_Git工作流程</figcaption></figure></li><li><p>添加并提交，查看日志</p><figure><img src="https://gaofee.cc/images/202303161019302.png" alt="38_Git工作流程" tabindex="0" loading="lazy"><figcaption>38_Git工作流程</figcaption></figure></li></ol></li></ul><h3 id="_3-3git图形化工具操作-理解" tabindex="-1"><a class="header-anchor" href="#_3-3git图形化工具操作-理解" aria-hidden="true">#</a> 3.3Git图形化工具操作(理解)</h3><ol><li><p>创建工作目录、初始化本地 git 仓库</p><figure><img src="https://gaofee.cc/images/202303161019303.png" alt="39_Git工作流程" tabindex="0" loading="lazy"><figcaption>39_Git工作流程</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019304.png" alt="40_Git工作流程" tabindex="0" loading="lazy"><figcaption>40_Git工作流程</figcaption></figure></li><li><p>新建一个 test.txt 文件（暂不执行添加操作）</p></li><li><p>选中文件右键，选择TortoiseGit，之后选择添加</p><figure><img src="https://gaofee.cc/images/202303161019305.png" alt="41_Git工作流程" tabindex="0" loading="lazy"><figcaption>41_Git工作流程</figcaption></figure></li><li><p>空白处右键,Git提交,提交到本地历史仓库</p><figure><img src="https://gaofee.cc/images/202303161019306.png" alt="42_Git工作流程" tabindex="0" loading="lazy"><figcaption>42_Git工作流程</figcaption></figure></li><li><p>空白处右键,TortoiseGit,显示日志,可以产看日志信息</p><figure><img src="https://gaofee.cc/images/202303161019307.png" alt="43_Git工作流程" tabindex="0" loading="lazy"><figcaption>43_Git工作流程</figcaption></figure></li><li><p>修改 test.txt 文件</p></li><li><p>添加并提交，查看日志</p></li></ol><h2 id="_4-git版本管理" tabindex="-1"><a class="header-anchor" href="#_4-git版本管理" aria-hidden="true">#</a> 4.Git版本管理</h2><h3 id="_4-1历史版本切换-理解" tabindex="-1"><a class="header-anchor" href="#_4-1历史版本切换-理解" aria-hidden="true">#</a> 4.1历史版本切换(理解)</h3><figure><img src="https://gaofee.cc/images/202303161019308.png" alt="44_历史版本切换" tabindex="0" loading="lazy"><figcaption>44_历史版本切换</figcaption></figure><ul><li><p>准备动作</p><ol><li>查看 my_project 的 log 日志 git reflog ：可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录的操作）</li><li>增加一次新的修改记录</li></ol></li><li><p>需求: 将代码切换到第二次修改的版本</p><p>指令：git reset --hard 版本唯一索引值</p></li></ul><h3 id="_4-2分支管理介绍-理解" tabindex="-1"><a class="header-anchor" href="#_4-2分支管理介绍-理解" aria-hidden="true">#</a> 4.2分支管理介绍(理解)</h3><ul><li><p>分支</p><ul><li>由每次提交的代码，串成的一条时间线</li><li>使用分支意味着你可以把你的工作从开发主线上分离开来,以免影响开发主线</li></ul></li><li><p>分支的使用场景</p><ol><li>周期较长的模块开发 假设你准备开发一个新功能，但是需要一个月才能完成 第一周写了20%的代码，突然发现原来已经写好的功能出现了一个严重的Bug 那现在就需要放下手中的新功能，去修复Bug 但这20%的代码不能舍弃，并且也担心丢失，这就需要开启一个新的版本控制。</li><li>尝试性的模块开发 业务人员给我们提出了一个需求，经过我们的思考和分析 该需求应该可以使用技术手段进行实现。 但是我们还不敢确定，我们就可以去创建一个分支基于分支进行尝试性开发。</li></ol></li><li><p>分支工作流程</p><ul><li><p>Master: 指向提交的代码版本</p></li><li><p>Header: 指向当前所使用的的分支</p><figure><img src="https://gaofee.cc/images/202303161019309.png" alt="45_分支工作流程介绍" tabindex="0" loading="lazy"><figcaption>45_分支工作流程介绍</figcaption></figure></li></ul></li></ul><h3 id="_4-3分支管理操作-应用" tabindex="-1"><a class="header-anchor" href="#_4-3分支管理操作-应用" aria-hidden="true">#</a> 4.3分支管理操作(应用)</h3><ul><li><p>创建和切换</p><p>创建命令：git branch 分支名 切换命令：git checkout 分支名</p></li><li><p>新分支添加文件</p><p>查看文件命令：ls</p><p>总结：不同分支之间的关系是平行的关系，不会相互影响</p></li><li><p>合并分支</p><p>合并命令：git merge 分支名</p></li><li><p>删除分支</p><p>删除命令：git branch -d 分支名</p></li><li><p>查看分支列表</p><p>查看命令：git branch</p></li></ul><h2 id="_5-远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-远程仓库" aria-hidden="true">#</a> 5.远程仓库</h2><h3 id="_5-1远程仓库工作流程-理解" tabindex="-1"><a class="header-anchor" href="#_5-1远程仓库工作流程-理解" aria-hidden="true">#</a> 5.1远程仓库工作流程(理解)</h3><figure><img src="https://gaofee.cc/images/202303161019310.png" alt="46_远程仓库" tabindex="0" loading="lazy"><figcaption>46_远程仓库</figcaption></figure><h3 id="_5-2远程仓库平台介绍-理解" tabindex="-1"><a class="header-anchor" href="#_5-2远程仓库平台介绍-理解" aria-hidden="true">#</a> 5.2远程仓库平台介绍(理解)</h3>',27),d=i("p",null,"GitHub",-1),h={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},u=i("p",null,"​ 各类好玩有趣的开源项目，只有想不到，没有找不到。",-1),_=i("p",null,"码云",-1),m={href:"https://gitee.com",target:"_blank",rel:"noopener noreferrer"},b=a('<h3 id="_5-3码云的注册-应用" tabindex="-1"><a class="header-anchor" href="#_5-3码云的注册-应用" aria-hidden="true">#</a> 5.3码云的注册(应用)</h3><figure><img src="https://gaofee.cc/images/202303161019311.png" alt="47_码云的注册" tabindex="0" loading="lazy"><figcaption>47_码云的注册</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019312.png" alt="48_码云的注册" tabindex="0" loading="lazy"><figcaption>48_码云的注册</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019313.png" alt="49_码云的注册" tabindex="0" loading="lazy"><figcaption>49_码云的注册</figcaption></figure><h3 id="_5-4先有本地项目-远程为空-应用" tabindex="-1"><a class="header-anchor" href="#_5-4先有本地项目-远程为空-应用" aria-hidden="true">#</a> 5.4先有本地项目,远程为空(应用)</h3>',5),x=a('<li><p>步骤</p><ol><li>创建本地仓库</li><li>创建或修改文件，添加（add）文件到暂存区，提交（commit）到本地仓库</li><li>创建远程仓库</li><li>推送到远程仓库</li></ol></li><li><p>创建远程仓库</p><figure><img src="https://gaofee.cc/images/202303161019314.png" alt="50_创建远程仓库" tabindex="0" loading="lazy"><figcaption>50_创建远程仓库</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019315.png" alt="51_创建远程仓库" tabindex="0" loading="lazy"><figcaption>51_创建远程仓库</figcaption></figure></li>',2),G=i("p",null,"生成SSH公钥",-1),y=i("li",null,[i("p",null,"推送代码之前，需要先配置SSH公钥"),i("figure",null,[i("img",{src:"https://gaofee.cc/images/202303161019316.png",alt:"52_配置SSH公钥",tabindex:"0",loading:"lazy"}),i("figcaption",null,"52_配置SSH公钥")])],-1),z=i("p",null,"生成SSH公钥步骤",-1),S=i("p",null,"设置Git账户",-1),T={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},H=i("li",null,"git config user.email（查看git邮箱）",-1),C={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},V=i("li",null,"git config --global user.email “邮箱”（设置全局邮箱）",-1),k=i("li",null,"cd ~/.ssh（查看是否生成过SSH公钥）",-1),v=i("figure",null,[i("img",{src:"https://gaofee.cc/images/202303161019317.png",alt:"53_配置SSH公钥",tabindex:"0",loading:"lazy"}),i("figcaption",null,"53_配置SSH公钥")],-1),E=a('<li><p>生成SSH公钥</p><ul><li>生成命令: ssh-keygen –t rsa –C “邮箱” ( 注意：这里需要敲3次回车)</li></ul><figure><img src="https://gaofee.cc/images/202303161019318.png" alt="54_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>54_配置SSH公钥</figcaption></figure><ul><li>查看命令: cat ~/.ssh/id-rsa.pub</li></ul><figure><img src="https://gaofee.cc/images/202303161019319.png" alt="55_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>55_配置SSH公钥</figcaption></figure></li><li><p>设置账户公钥</p><figure><img src="https://gaofee.cc/images/202303161019320.png" alt="56_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>56_配置SSH公钥</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019321.png" alt="57_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>57_配置SSH公钥</figcaption></figure></li><li><p>公钥测试</p><ul><li>命令: ssh -T <a href="mailto:git@gitee.com">git@gitee.com</a></li></ul><figure><img src="https://gaofee.cc/images/202303161019322.png" alt="58_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>58_配置SSH公钥</figcaption></figure></li>',3),I=a('<li><p>推送到远程仓库</p></li><li><p>步骤</p><ol><li>为远程仓库的URL（网址），自定义仓库名称</li><li>推送</li></ol></li><li><p>命令 git remote add 远程名称 远程仓库URL git push -u 仓库名称 分支名</p><figure><img src="https://gaofee.cc/images/202303161019323.png" alt="59_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>59_配置SSH公钥</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019324.png" alt="60_配置SSH公钥" tabindex="0" loading="lazy"><figcaption>60_配置SSH公钥</figcaption></figure></li>',3),B=a('<h3 id="_5-5先有远程仓库-本地为空-应用" tabindex="-1"><a class="header-anchor" href="#_5-5先有远程仓库-本地为空-应用" aria-hidden="true">#</a> 5.5先有远程仓库,本地为空(应用)</h3><ul><li>步骤 <ol><li>将远程仓库的代码，克隆到本地仓库 克隆命令：git clone 仓库地址</li><li>创建新文件，添加并提交到本地仓库</li><li>推送至远程仓库</li><li>项目拉取更新 拉取命令：git pull 远程仓库名 分支名</li></ol></li></ul><h3 id="_5-6代码冲突-应用" tabindex="-1"><a class="header-anchor" href="#_5-6代码冲突-应用" aria-hidden="true">#</a> 5.6代码冲突(应用)</h3><ul><li><p>产生原因:</p><p>两个程序员操作同一个文件,其中一个程序员在修改文件后,push到远程仓库,另一个程序员应该先pull将最新的代码更新到本地仓库后,在修改代码,之后push到远程仓库,结果他没有先pull将最新的代码更新到本地仓库,而是直接将自己的代码push到远程仓库,这样就可能会导致代码冲突</p></li></ul><figure><img src="https://gaofee.cc/images/202303161019325.png" alt="61_代码冲突" tabindex="0" loading="lazy"><figcaption>61_代码冲突</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019326.png" alt="62_代码冲突" tabindex="0" loading="lazy"><figcaption>62_代码冲突</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019327.png" alt="63_代码冲突" tabindex="0" loading="lazy"><figcaption>63_代码冲突</figcaption></figure><ul><li><p>如何解决冲突</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;和&gt;&gt;&gt;&gt;&gt;&gt;&gt;中间的内容,就是冲突部分</p><ol><li>修改冲突行，保存，即可解决冲突。</li><li>重新add冲突文件并commit到本地仓库，重新push到远程</li></ol></li></ul><h2 id="_6-idea集成git" tabindex="-1"><a class="header-anchor" href="#_6-idea集成git" aria-hidden="true">#</a> 6.IDEA集成Git</h2><h3 id="_6-1idea中配置git-应用" tabindex="-1"><a class="header-anchor" href="#_6-1idea中配置git-应用" aria-hidden="true">#</a> 6.1IDEA中配置Git(应用)</h3><ol><li>File -&gt; Settings</li></ol><figure><img src="https://gaofee.cc/images/202303161019328.png" alt="64_IDEA中配置Git" tabindex="0" loading="lazy"><figcaption>64_IDEA中配置Git</figcaption></figure><ol start="2"><li>Version Control -&gt; Git -&gt; 指定git.exe存放目录</li></ol><figure><img src="https://gaofee.cc/images/202303161019329.png" alt="65_IDEA中配置Git" tabindex="0" loading="lazy"><figcaption>65_IDEA中配置Git</figcaption></figure><ol start="3"><li>点击Test测试</li></ol><figure><img src="https://gaofee.cc/images/202303161019330.png" alt="66_IDEA中配置Git" tabindex="0" loading="lazy"><figcaption>66_IDEA中配置Git</figcaption></figure><h3 id="_6-2创建本地仓库-应用" tabindex="-1"><a class="header-anchor" href="#_6-2创建本地仓库-应用" aria-hidden="true">#</a> 6.2创建本地仓库(应用)</h3><ol><li><p>VCS-&gt;Import into Version Control-&gt;Create Git Repository</p><figure><img src="https://gaofee.cc/images/202303161019331.png" alt="67_创建本地仓库" tabindex="0" loading="lazy"><figcaption>67_创建本地仓库</figcaption></figure></li><li><p>选择工程所在的目录,这样就创建好本地仓库了</p><figure><img src="https://gaofee.cc/images/202303161019332.png" alt="68_创建本地仓库" tabindex="0" loading="lazy"><figcaption>68_创建本地仓库</figcaption></figure></li><li><p>点击git后边的对勾,将当前项目代码提交到本地仓库</p><p>注意: 项目中的配置文件不需要提交到本地仓库中,提交时,忽略掉即可</p><figure><img src="https://gaofee.cc/images/202303161019333.png" alt="69_创建本地仓库" tabindex="0" loading="lazy"><figcaption>69_创建本地仓库</figcaption></figure></li></ol><h3 id="_6-3版本切换-应用" tabindex="-1"><a class="header-anchor" href="#_6-3版本切换-应用" aria-hidden="true">#</a> 6.3版本切换(应用)</h3><ul><li><p>方式一: 控制台Version Control-&gt;Log-&gt;Reset Current Branch...-&gt;Reset</p><p>这种切换的特点是会抛弃原来的提交记录</p><figure><img src="https://gaofee.cc/images/202303161019334.png" alt="70_版本切换" tabindex="0" loading="lazy"><figcaption>70_版本切换</figcaption></figure></li><li><p>方式二:控制台Version Control-&gt;Log-&gt;Revert Commit-&gt;Merge-&gt;处理代码-&gt;commit</p><p>这种切换的特点是会当成一个新的提交记录,之前的提交记录也都保留</p><figure><img src="https://gaofee.cc/images/202303161019335.png" alt="71_版本切换" tabindex="0" loading="lazy"><figcaption>71_版本切换</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019336.png" alt="72_版本切换" tabindex="0" loading="lazy"><figcaption>72_版本切换</figcaption></figure><p>​ <img src="https://gaofee.cc/images/202303161019337.png" alt="73_版本切换" loading="lazy"></p></li></ul><h3 id="_6-4分支管理-应用" tabindex="-1"><a class="header-anchor" href="#_6-4分支管理-应用" aria-hidden="true">#</a> 6.4分支管理(应用)</h3><ul><li><p>创建分支</p><p>VCS-&gt;Git-&gt;Branches-&gt;New Branch-&gt;给分支起名字-&gt;ok</p><figure><img src="https://gaofee.cc/images/202303161019338.png" alt="74_创建分支" tabindex="0" loading="lazy"><figcaption>74_创建分支</figcaption></figure></li><li><p>切换分支</p><p>idea右下角Git-&gt;选择要切换的分支-&gt;checkout</p><figure><img src="https://gaofee.cc/images/202303161019339.png" alt="75_切换分支" tabindex="0" loading="lazy"><figcaption>75_切换分支</figcaption></figure></li><li><p>合并分支</p><p>VCS-&gt;Git-&gt;Merge changes-&gt;选择要合并的分支-&gt;merge</p><figure><img src="https://gaofee.cc/images/202303161019340.png" alt="76_合并分支" tabindex="0" loading="lazy"><figcaption>76_合并分支</figcaption></figure><p>处理分支中的代码</p><figure><img src="https://gaofee.cc/images/202303161019341.png" alt="77_合并分支" tabindex="0" loading="lazy"><figcaption>77_合并分支</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019342.png" alt="78_合并分支" tabindex="0" loading="lazy"><figcaption>78_合并分支</figcaption></figure><figure><img src="https://gaofee.cc/images/202303161019343.png" alt="79_合并分支" tabindex="0" loading="lazy"><figcaption>79_合并分支</figcaption></figure></li><li><p>删除分支</p><p>idea右下角-&gt;选中要删除的分支-&gt;Delete</p><figure><img src="https://gaofee.cc/images/202303161019344.png" alt="80_删除分支" tabindex="0" loading="lazy"><figcaption>80_删除分支</figcaption></figure></li></ul><h3 id="_6-5本地仓库推送到远程仓库-应用" tabindex="-1"><a class="header-anchor" href="#_6-5本地仓库推送到远程仓库-应用" aria-hidden="true">#</a> 6.5本地仓库推送到远程仓库(应用)</h3><ol><li><p>VCS-&gt;Git-&gt;Push-&gt;点击master Define remote</p><figure><img src="https://gaofee.cc/images/202303161019345.png" alt="81_本地仓库推送到远程仓库" tabindex="0" loading="lazy"><figcaption>81_本地仓库推送到远程仓库</figcaption></figure></li><li><p>将远程仓库的路径复制过来-&gt;Push</p><figure><img src="https://gaofee.cc/images/202303161019346.png" alt="82_本地仓库推送到远程仓库" tabindex="0" loading="lazy"><figcaption>82_本地仓库推送到远程仓库</figcaption></figure></li></ol><h3 id="_6-6远程仓库克隆到本地仓库-应用" tabindex="-1"><a class="header-anchor" href="#_6-6远程仓库克隆到本地仓库-应用" aria-hidden="true">#</a> 6.6远程仓库克隆到本地仓库(应用)</h3><p>File-&gt;Close Project-&gt;Checkout from Version Control-&gt;Git-&gt;指定远程仓库的路径-&gt;指定本地存放的路径-&gt;clone</p><figure><img src="https://gaofee.cc/images/202303161019347.png" alt="83_远程仓库克隆到本地仓库" tabindex="0" loading="lazy"><figcaption>83_远程仓库克隆到本地仓库</figcaption></figure>',27);function D(L,A){const e=p("ExternalLinkIcon");return n(),o("div",null,[c,i("p",null,[t("官网下载地址："),i("a",s,[t("https://git-scm.com/downloads"),g(e)])]),f,i("ul",null,[i("li",null,[d,i("p",null,[t("域名："),i("a",h,[t("https://github.com"),g(e)]),t(" 介绍：GitHub是全球最大的开源项目托管平台，俗称大型程序员社区化交友网站")]),u]),i("li",null,[_,i("p",null,[t("域名："),i("a",m,[t("https://gitee.com"),g(e)]),t(" 介绍：码云是全国最大的开源项目托管平台，良心平台，速度快，提供免费私有库")])])]),b,i("ul",null,[x,i("li",null,[G,i("ul",null,[y,i("li",null,[z,i("ol",null,[i("li",null,[S,i("ul",null,[i("li",null,[t("git config "),i("a",T,[t("user.name"),g(e)]),t("（查看git账户）")]),H,i("li",null,[t("git config --global "),i("a",C,[t("user.name"),g(e)]),t(" “账户名”（设置全局账户名）")]),V,k]),v]),E])])])]),I]),B])}const R=l(r,[["render",D],["__file","day26-Git.html.vue"]]);export{R as default};
